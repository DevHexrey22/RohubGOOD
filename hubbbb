if game.PlaceId == 2377868063 then
local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid:4941755400"):format((icon or 4941755400))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|Strucid')

local tab1 = ui:Tab('🎯Aim','4941755400')
local tab2 = ui:Tab('Visuals', '')
local tab3 = ui:Tab('Player', '')
local tab4 = ui:Tab('Credits', '')
local tab5 = ui:Tab('Settings', '')


local Objects = tab1:Section('Aim Settings')

Objects:Button('Silent Aim', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/ICEEDev/Epic-Roblox-Scripts/master/StrucidSilentAim.lua", true))()
end)

Objects:Button('Pro firerate', function() -- string <text>, function [callback]
    local req=getrenv().require;

getrenv().require=function(...)
local dat = req(...)

if(typeof(dat)=='table')then
dat.Recoil=0
dat.Debounce=.05
dat.Inaccuracy=0
dat.Lvl=1
end

return dat;
end
end)


Objects:Button('Aimbot (SOON)', function() -- string <text>, function [callback]
    
end)





local Objects = tab2:Section('Visuals')

Objects:Button('ESP', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/SKELEESP/main/SPOOKY", true))()
end)

Objects:Button('Tracers', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/trace/main/lua", true))()
end)
local Objects = tab3:Section('Player')

Objects:Button('Fly', function() -- string <text>, function [callback]
   loadstring(game:HttpGet(('https://pastebin.com/raw/WxmvCLLH'),true))()
end)

Objects:Button('enable fly everytime you spawn in', function() -- string <text>, function [callback]
   
end)

Objects:Button('Inf jump', function() -- string <text>, function [callback]
   loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/INF/main/jump", true))()
end)

Objects:Button('Rejoin on vote kick', function() -- string <text>, function [callback]
   loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/SECRTE/main/ff", true))()
end)

local Settings= tab5:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

local Objects = tab4:Section('Credits')

Objects:Button('Rohub Discord: discord.gg/kszkGfN24d', function() -- string <text>, function [callback]
   
end)

Objects:Button('Script Credits: Dev_Hexry#1219', function() -- string <text>, function [callback]
   
end)

Objects:Button('Ui Credits: xandu#1208 ', function() -- string <text>, function [callback]
   
end)

Objects:Button('emotional support: Lasuzx#9106', function() -- string <text>, function [callback]
   
end)

Objects:Button('xandu#1208s Discord: https://discord.gg/Ab69sCk6Hk ', function() -- string <text>, function [callback]
   
end)




return library
end
if game.PlaceId == 8750997647 then
    local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid://%s"):format((icon or 4370341699))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|Tapping Legends')

local tab1 = ui:Tab('Farming', 'icon id here, remove this arg for a page icon')
local tab2 = ui:Tab('Upgrades', 'icon id here, remove this arg for a page icon')
local tab3 = ui:Tab('Teleports', 'icon id here, remove this arg for a page icon')
local tab4 = ui:Tab('Settings', 'icon id here, remove this arg for a page icon')

local Objects = tab1:Section('Farming')


Objects:Button('Anti Idle', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	 game:service'Players'.LocalPlayer.Idled:connect(function()
    bb:CaptureController()bb:ClickButton2(Vector2.new())
    ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
end)
local Objects = tab2:Section('Upgrades')
Objects:Button('FreeAutoClicker', function() -- string <text>, function [callback]
	local ohString1 = "Ruby"
    local ohString2 = "FreeAutoClicker"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)
end)

Objects:Button('AutoClickerMultiplier', function() -- string <text>, function [callback]
	local ohString1 = "Ruby"
    local ohString2 = "AutoClickerMultiplier"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)
end)

Objects:Button('Walkspeed', function() -- string <text>, function [callback]
	 local ohString1 = "Ruby"
    local ohString2 = "WalkSpeed"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)
end)

Objects:Button('CriticalChances', function() -- string <text>, function [callback]
	  local ohString1 = "Ruby"
    local ohString2 = "CriticalChances"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)
end)

Objects:Button('PetStorage', function() -- string <text>, function [callback] 
        local ohString1 = "Ruby"
    local ohString2 = "PetStorage"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)

end)

Objects:Button('MoreRebirths', function() -- string <text>, function [callback] 
         local ohString1 = "Ruby"
    local ohString2 = "MoreRebirths"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)

end)

Objects:Button('TapMultiplier', function() -- string <text>, function [callback] 
          local ohString1 = "Ruby"
    local ohString2 = "TapMultiplier"
    
    game:GetService("ReplicatedStorage").Remotes.Upgrade:InvokeServer(ohString1, ohString2)

end)

local Objects = tab3:Section('Teleports')
Objects:Button('Spawn Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	local ohNumber1 = 1

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Forest Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	local ohNumber1 = 2

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Desert Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	 local ohNumber1 = 3

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Winter Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	  local ohNumber1 = 4

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Lava Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	  local ohNumber1 = 5

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Aqua Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	   local ohNumber1 = 6

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)

Objects:Button('Sakura Island', 'World', false, function(v) -- string <text>, string <flag>, boolean <enabled>, function [callback]
	   local ohNumber1 = 7

    game:GetService("ReplicatedStorage").Remotes.TPArea:FireServer(ohNumber1)
end)


local Settings = tab4:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

return library
end
if game.PlaceId == 9498006165 then

game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rohub - Tapping Sim Loaded",
	Text = "Join our discord server, discord.gg/F6u3vDwD9p"
})
	
local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid:4941755400"):format((icon or 4941755400))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|Tapping Simulator')

local tab1 = ui:Tab('Main','4941755400')
local tab2 = ui:Tab('Rebirths', '')
local tab3 = ui:Tab('Teleports', '')
local tab4 = ui:Tab('Misc', '')
local tab5 = ui:Tab('Credits', '')
local tab6 = ui:Tab('Settings', '')


local Objects = tab1:Section('Main')

Objects:Toggle('clicks', 'clicks', false, function(state)
if state then
        getgenv().auto = true;
while auto and task.wait() do
   game:service'ReplicatedStorage'.Events.Tap:FireServer()
end
    else
       getgenv().auto = false;
    end
end)

Objects:Toggle('Auto triple clicks', '3x', false, function(state)
if state then
        getgenv().boost = true;
while boost and task.wait() do
local args = {
    [1] = "tripleTaps"
}
game:GetService("ReplicatedStorage").Events.UseBoost:FireServer(unpack(args))
end
    else
       getgenv().boost = false;
    end
end)

Objects:Toggle('Auto Claim Rank', 'CR', false, function(state)
if state then
        getgenv().rank = true;
while rank and task.wait() do
game:GetService("ReplicatedStorage").Events.ClaimRankReward:FireServer()
end
    else
       getgenv().rank = false;
    end
end)







local Objects = tab2:Section('Rebriths')
local storeDropdown
storeDropdown = Objects:Dropdown('Rebriths', 'Rebriths', {'soon'}, function(selected) -- string <text>, string <flag>, table <options>, function [callback]
                 
end)

local Objects = tab3:Section('Teleports')

local storeDropdown
storeDropdown = Objects:Dropdown('Islands', 'Teleports', {'Spawn', 'Forest Island', 'Flower Island', 'Swamp Island', 'Snow Island', 'Desert Island', 'Death Island', 'Beach Island', 'Mines Island', 'Cloud Island', 'Coral Island', 'Darkheart Island'}, function(SelectedLocation) -- string <text>, string <flag>, table <options>, function [callback]

   if SelectedLocation == "Spawn" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-74,17,-480)
   elseif SelectedLocation == "Forest Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-165,977,-438)
   elseif SelectedLocation == "Flower Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-179,1515,-645)
    elseif SelectedLocation == "Swamp Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-259,2113,-654)
	elseif SelectedLocation == "Snow Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-231,2934,-471)   
	elseif SelectedLocation == "Desert Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-193,4225,-779)   
	elseif SelectedLocation == "Death Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-306,5416,-480)
	elseif SelectedLocation == "Beach Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-167,6872,-496)
	elseif SelectedLocation == "Mines Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-264,8366,-483)   
	elseif SelectedLocation == "Cloud Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-318,11236,-240)  
	elseif SelectedLocation == "Coral Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-494,13802,-543)  
	elseif SelectedLocation == "Darkheart Island" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-429,17170,-554)             
   end
end)

local Objects = tab4:Section('Misc')
local storeDropdown
storeDropdown = Objects:Dropdown('Gui', 'Misc', {'Shiny Machine', 'Rainbow Machine', 'Enchantments', 'Upgrades'}, function(SelectedLocation) -- string <text>, string <flag>, table <options>, function [callback]
if SelectedLocation == "Shiny Machine" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-231,13,-549)
   elseif SelectedLocation == "Rainbow Machine" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-190,16,-559) 
	elseif SelectedLocation == "Enchantments" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(28,13,-576)    
   elseif SelectedLocation == "Upgrades" then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-157,12,-392)            
   end
end)

Objects:Slider('Speed', 'ws', 16, 16, 500, function(value) -- string <text>, string <flag>, int <default>, int <min>, ini <max>, function [callback]
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

Objects:Slider('Jump Height', 'jh', 16, 16, 500, function(s) -- string <text>, string <flag>, int <default>, int <min>, ini <max>, function [callback]
    game.Players.LocalPlayer.Character.Humanoid.JumpHeight = s
end)

local Settings= tab6:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

local Objects = tab5:Section('Credits')

Objects:Button('Rohub Discord: discord.gg/kszkGfN24d', function() -- string <text>, function [callback]
   
end)

Objects:Button('Owner: Dev_Hexry#1219', function() -- string <text>, function [callback]
   
end)

Objects:Button('Script: Chronics#0560', function() -- string <text>, function [callback]
   
end)

Objects:Button('Ui Credits: xandu#5980 ', function() -- string <text>, function [callback]
   
end)

Objects:Button('emotional support: Lasuzx#9106', function() -- string <text>, function [callback]
   
end)


return library
end
if game.PlaceId == 2788229376 then
local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid:4941755400"):format((icon or 4941755400))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|Dahood')

local tab1 = ui:Tab('Farm','4941755400')
local tab2 = ui:Tab('Visuals', '')
local tab3 = ui:Tab('Player', '')
local tab4 = ui:Tab('misc', '')
local tab5 = ui:Tab('Credits', '')
local tab6 = ui:Tab('Settings', '')


local Objects = tab1:Section('Auto farm')

Objects:Toggle('Auto Farm', 'FARM', false, function(state)
local humanoid = game.Players.LocalPlayer.Character.Humanoid
local tool = game.Players.LocalPlayer.Backpack.Combat

local function getMoneyAroundMe() 
    wait(0.5)
    for i, money in ipairs(game.Workspace.Ignored.Drop:GetChildren()) do
        if money.Name == "MoneyDrop" and (money.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 20 then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = money.CFrame
            fireclickdetector(money.ClickDetector)
            wait(0.5)
        end  
    end
end


local function startAutoFarm() 
    humanoid:EquipTool(tool)

    for i, v in ipairs(game.Workspace.Cashiers:GetChildren()) do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Open.CFrame * CFrame.new(0, 0, 2)

        for i = 0, 15 do
            wait(0.5)
            tool:Activate()
        end

        getMoneyAroundMe()

    end



    wait(0.5)
 
end

startAutoFarm()
end)
    
local Objects = tab2:Section('Visuals')

local Objects = tab3:Section('Player')

local Objects = tab4:Section('Misc')



local Settings= tab6:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

local Objects = tab5:Section('Credits')

Objects:Button('Rohub Discord: discord.gg/kszkGfN24d', function() -- string <text>, function [callback]
   
end)

Objects:Button('Script Credits: Dev_Hexry#1219', function() -- string <text>, function [callback]
   
end)

Objects:Button('Ui Credits: xandu#1208 ', function() -- string <text>, function [callback]
   
end)

Objects:Button('emotional support: Lasuzx#9106', function() -- string <text>, function [callback]
   
end)

Objects:Button('xandu#1208s Discord: https://discord.gg/Ab69sCk6Hk ', function() -- string <text>, function [callback]
   
end)




return library
end

if game.PlaceId == 8737602449 then
local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid:4941755400"):format((icon or 4941755400))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|pls donate')

local tab1 = ui:Tab('Main','rbxassetid://8950621656')
local tab4 = ui:Tab('Credits', '')
local tab5 = ui:Tab('Settings', '')


local Objects = tab1:Section('Donate shit')

Objects:Textbox('Who donated?', 'donorname', 'donors,name', function(Value) -- string <text>, string <flag>, string <default>, function [callback]
    Callback = function(Value)
		_G.WhoDonated = Value
	end	
end)

Objects:Textbox('Donors user id', 'donorname', 'donors,name', function(Value) -- string <text>, string <flag>, string <default>, function [callback]
    Callback = function(Value)
		_G.SmiteAnimationId = Value
	end		
end)

Objects:Textbox('Dono Receiver', 'donorname', 'donors,name', function(Value) -- string <text>, string <flag>, string <default>, function [callback]
		_G.WhoGotRobux = Value
			
end)

Objects:Slider('Robux amount', 'robux', 0, 0, 1000000, function(Value) -- string <text>, string <flag>, int <default>, int <min>, ini <max>, function [callback]
	Callback = function(Value)
		_G.HowMuchRobux = Value
	end   
end)


Objects:Button('DONATE', function() -- string <text>, function [callback]
    	Callback = function()


function comma(amount)
	local formatted = amount
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		if (k==0) then
			break
		end
	end
	return formatted
end


function globalmessage()
game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "[GLOBAL]: @".._G.WhoDonated.." dropped "..comma(_G.HowMuchRobux).." Robux to @".._G.WhoGotRobux.."!!",
            Color = Color3.fromRGB(0, 230, 255),
            Font = Enum.Font.GothamBold,
            TextSize = 18,
        })
end

function nukemessage()
game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "[GLOBAL]: @".._G.WhoDonated.." dropped a "..comma(_G.HowMuchRobux).." Robux nuke to @".._G.WhoGotRobux.."!!!",
            Color = Color3.fromRGB(255, 0, 230),
            Font = Enum.Font.GothamBold,
            TextSize = 18,
        })
end

function hammernuke()
game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "[GLOBAL]: @".._G.WhoDonated.." just gave "..comma(_G.HowMuchRobux).." ROBUX to @".._G.WhoGotRobux.."!?!?",
            Color = Color3.fromRGB(255, 0, 100),
            Font = Enum.Font.GothamBold,
            TextSize = 18,
        })
end
--
function normalmessage()
game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = _G.WhoDonated.." tipped "..comma(_G.HowMuchRobux).. " Robux to ".._G.WhoGotRobux,
            Color = Color3.fromRGB(8, 255, 36),
            Font = Enum.Font.GothamBold,
            TextSize = 18,
        })
end



local NumberWithCommas = _G.HowMuchRobux

if NumberWithCommas < 10000 then
    normalmessage()
print("💰 ".._G.WhoDonated.." tipped "..comma(_G.HowMuchRobux).." Robux to ".._G.WhoGotRobux)
    elseif NumberWithCommas > 999999 then
print("[GLOBAL]: 💰 ".._G.WhoDonated.." tipped "..comma(_G.HowMuchRobux).." Robux to ".._G.WhoGotRobux)

    hammernuke()
local level5 = game:GetObjects("rbxassetid://10147461869")[1]
level5.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
level5.Playing = true
game:GetService("Workspace").Map.Boards.LiveDonations.Top.DonationLevel5.Playing = true
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
local Noobie = game:GetObjects("rbxassetid://10147737587")[1]
Noobie.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
wait(5)
wait(.1)
local l__ReplicatedStorage__1 = game:GetService("ReplicatedStorage");
local l__Players__2 = game:GetService("Players");
local l__Debris__3 = game:GetService("Debris");
local l__RunService__4 = game:GetService("RunService");
local l__TweenService__1 = game:GetService("TweenService");
local function u2(p1, p2)
	p1.Speed = NumberRange.new(p1.Speed.Min * p2, p1.Speed.Max * p2);
	p1.Acceleration = p1.Acceleration * p2;
	local l__Keypoints__5 = p1.Size.Keypoints;
	local v6 = {};
	for v7 = 1, #l__Keypoints__5 do
		table.insert(v6, NumberSequenceKeypoint.new(l__Keypoints__5[v7].Time, l__Keypoints__5[v7].Value * p2, l__Keypoints__5[v7].Envelope * p2));
	end;
	p1.Size = NumberSequence.new(v6);
end;
local u3 = Vector3.new(42, 0, 101);
local function u4(p3, p4)
	local v8 = game.Players:GetHumanoidDescriptionFromUserId(p3);
	v8.DepthScale = v8.DepthScale * 53;
	v8.HeadScale = v8.HeadScale * 53;
	v8.HeightScale = v8.HeightScale * 53;
	v8.WidthScale = v8.WidthScale * 53;
	p4.Humanoid:ApplyDescription(v8);
	for v9, v10 in pairs(p4:GetDescendants()) do
		if (v10:IsA("BasePart") or v10:IsA("Decal")) and v10.Name ~= "HumanoidRootPart" then
			v10.Transparency = 0;
		end;
	end;
end;
local function u5(p5, p6, p7)
	l__TweenService__1:Create(p5, p6, p7):Play();
end;
local u6 = math.random(-180, 180);
local function u7(p8)
	p8 = tostring(p8);
	return p8:reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "");
end;
local u8 = require(game.Players.LocalPlayer.PlayerGui.ScreenGui.SmiteAnimation.CameraShaker);
wait(1);
(function(p9, p10, p11, p12)
	local v11 = game.ReplicatedStorage.Templates.RobuxHammerGiant:Clone();
	local l__DiamondHammer__12 = v11.DiamondHammer;
	for v13, v14 in pairs(v11:GetDescendants()) do
		if (v14:IsA("BasePart") or v14:IsA("Decal")) and v14.Name ~= "HumanoidRootPart" and (v14:IsDescendantOf(l__DiamondHammer__12) == false or v14:IsDescendantOf(v11.Objects) == false) then
			v14.Transparency = 1;
		end;
	end;
	local l__CurrentCamera__9 = workspace.CurrentCamera;

	u2(l__DiamondHammer__12.Handle.MainDiamondCenter.Shockwave, 60);
	u2(l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeGlow, 50);
	u2(l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeRays, 50);
	l__DiamondHammer__12.Handle.Transparency = 1;
	l__DiamondHammer__12.Handle.Diamonds.Transparency = 1;
	l__DiamondHammer__12.Handle.CanCollide = false;
	v11.Parent = workspace;
	u2(l__DiamondHammer__12.Handle.BaseFrontOffset.Shockwave, 10);
	local v15 = v11.Objects.Meteor:Clone();
	local v16 = v11.Objects.FloorAmbiance:Clone();
	local v17 = v11.Objects.Ambiance:Clone();
	local v18 = v11.Objects.ImpactVisuals:Clone();
	local v19 = v11.Objects.Portal:Clone();
	v11.Objects:Destroy();
	local l__Sounds__20 = v11.Sounds;
	l__Sounds__20.Parent = workspace;
	l__Sounds__20.Name = "1MDonationEffect_Sounds";
	local v21 = v11.Humanoid.Animator:LoadAnimation(v11.Animations.Giant_MainAnimation);
	print("playtime");
	v21.Priority = Enum.AnimationPriority.Action;
	v21:Play();
	local v22 = Instance.new("ColorCorrectionEffect");
	v22.Enabled = true;
	v22.Name = "SmiteColorCorrection";
	v22.Parent = game.Lighting;
	local v23 = Instance.new("BloomEffect");
	v23.Enabled = true;
	v23.Name = "SmiteBloom";
	v23.Size = 20;
	v23.Threshold = 0.1;
	v23.Intensity = -1;
	v23.Parent = game.Lighting;
	v11.PrimaryPart = v11.FloorLevel;
	v11:SetPrimaryPartCFrame(CFrame.new(u3.X, u3.Y, u3.Z));
	v11:SetPrimaryPartCFrame(v11.FloorLevel.CFrame:ToWorldSpace(CFrame.Angles(0, math.rad(math.random(-180, 180)), math.rad(0))));
	v11:SetPrimaryPartCFrame(v11.FloorLevel.CFrame:ToWorldSpace(CFrame.new(25, 0, 365)));
	v11.PrimaryPart = v11.HumanoidRootPart;
	local v24 = v19:Clone();
	v19.PortalAmbiance.Volume = 0;
	v19.PortalAmbiance.PlaybackSpeed = 0;
	v24.CFrame = v11.FloorLevel.CFrame;
	v24.Parent = workspace;
	v11.FloorLevel:Destroy();
	local l__LeftEyeAttachment__25 = v11.Head.LeftEyeAttachment;
	local l__RightEyeAttachment__26 = v11.Head.RightEyeAttachment;
	l__LeftEyeAttachment__25.Parent = nil;
	l__RightEyeAttachment__26.Parent = nil;
	l__DiamondHammer__12.Parent = nil;
	local v27, v28 = pcall(function()
		u4(p12, v11);
		v11.Humanoid.BodyDepthScale.Value = 50;
		v11.Humanoid.HeadScale.Value = 50;
		v11.Humanoid.BodyHeightScale.Value = 50;
		v11.Humanoid.BodyWidthScale.Value = 50;
	end);
	if v27 == false then
		warn("Unable to set giant's apperance to donator (" .. p9 .. ")  (" .. v28 .. ")");
	end;
	l__DiamondHammer__12.Parent = v11;
	l__DiamondHammer__12.Weld.Attachment0 = v11.RightHand.RightGripAttachment;
	l__LeftEyeAttachment__25.Parent = v11.Head;
	l__RightEyeAttachment__26.Parent = v11.Head;
	l__LeftEyeAttachment__25.Position = Vector3.new(-6, 11, -32);
	l__RightEyeAttachment__26.Position = Vector3.new(6, 11, -32);
	l__Sounds__20.Summon:Play();
	v24.Transparency = 0;
	v24.Sparks.Enabled = true;
	v24.Appearance.Enabled = true;
	u5(v24.Sparks, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Rate = 150
	});
	u5(v24.Appearance, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Rate = 200
	});
	u5(v24, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Size = Vector3.new(400, 1, 400)
	});
	u5(v24.OuterLightBeam, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Width0 = 400, 
		Width1 = 600
	});
	u5(v24.InnerLightBeam, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Width0 = 200, 
		Width1 = 300
	});
	v24.PortalAmbiance.Playing = true;
	v24.PortalOpen1:Play();
	v24.PortalOpen2:Play();
	u5(v24.PortalAmbiance, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0), {
		Volume = 1.5, 
		PlaybackSpeed = 1.25
	});
	local u10 = true;
	local u11 = 0.5;
	spawn(function()
		while u10 == true do
			wait(u11);
			spawn(function()
				local v29 = math.random(100, 400) / 100;
				local v30 = math.random(250, 400) / 100;
				local v31 = math.random(500, 750);
				local v32 = v15:Clone();
				v32.Parent = workspace;
				v32.Transparency = 1;
				v32.Position = u3 + Vector3.new(math.random(-750, 750), 0, math.random(-750, 750));
				v32.Size = v32.Size * v29;
				v32.CFrame = v32.CFrame:ToWorldSpace(CFrame.Angles(math.rad(math.random(-10, 10)), math.rad(u6), math.rad(30)));
				v32.Position = v32.Position + v32.CFrame.UpVector * v31;
				for v33, v34 in pairs(v32:GetDescendants()) do
					if v34:IsA("ParticleEmitter") then
						u2(v34, v29);
						if string.find(v34.Name, "Meteor_") ~= nil then
							v34.Enabled = true;
						end;
					end;
				end;
				v32.Glow.Range = v32.Glow.Range * v29;
				v32.Glow.Enabled = true;
				v32.Trail0.Position = v32.Trail0.Position * (v29 / 2);
				v32.Trail1.Position = v32.Trail1.Position * (v29 / 2);
				v32.Trail.Enabled = true;
				v32.Whoosh.Volume = 0;
				v32.Whoosh.TimePosition = math.random(0, v32.Whoosh.TimeLength);
				v32.Whoosh.PlaybackSpeed = 1.5 - v29 * 0.15;
				v32.Impact.PlaybackSpeed = 1.5 - v29 * 0.15;
				v32.Whoosh.Playing = true;
				u5(v32, TweenInfo.new(v30, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
					Position = v32.Position + v32.CFrame.UpVector * -v31, 
					Orientation = Vector3.new(math.random(-180, 180) * 3, math.random(-180, 180) * 3, math.random(-180, 180) * 3)
				});
				u5(v32, TweenInfo.new(v30 * 0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Transparency = 0
				});
				u5(v32.Whoosh, TweenInfo.new(v30 * 0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Volume = 1
				});
				wait(v30);
				v32.Transparency = 1;
				v32.Orientation = Vector3.new(0, 0, 0);
				v32.Glow.Range = v32.Glow.Range * 1.5;
				v32.Glow.Brightness = v32.Glow.Brightness * 3;
				u5(v32.Glow, TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
					Brightness = 0, 
					Range = v32.Glow.Range / 2
				});
				for v35, v36 in pairs(v32:GetDescendants()) do
					if v36:IsA("ParticleEmitter") then
						if string.find(v36.Name, "Meteor_") ~= nil then
							v36.Enabled = false;
						end;
						if string.find(v36.Name, "Explosion_") ~= nil then
							v36:Emit(v36:GetAttribute("EmitCount"));
						end;
					end;
				end;
				v32.Trail.Enabled = false;
				v32.Whoosh.Playing = false;
				v32.Impact:Play();
				wait(3);
				v32:Destroy();
			end);		
		end;
	end);
	local v37 = v16:Clone();
	v37.Position = u3 + Vector3.new(0, -0.5, 0);
	v37.Parent = workspace;
	u5(v37, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Size = Vector3.new(2048, 1, 2048)
	});
	local v38 = v17:Clone();
	v38.Position = u3 + Vector3.new(0, 0, 0);
	v38.Size = Vector3.new(1000, 1000, 1000);
	v38.CFrame = v38.CFrame:ToWorldSpace(CFrame.Angles(math.rad(0), math.rad(u6), math.rad(30)));
	v38.Position = v38.Position + v38.CFrame.UpVector * 600;
	v38.Parent = workspace;
	spawn(function()
		for v39, v40 in pairs(v37:GetChildren()) do
			if v40:IsA("ParticleEmitter") then
				u2(v40, 1.25);
				v40.Enabled = true;
			end;
		end;
		for v41, v42 in pairs(v38:GetChildren()) do
			if v42:IsA("ParticleEmitter") then
				u2(v42, 1.75);
				v42.Enabled = true;
			end;
		end;
		u5(l__Sounds__20.FireLoop, TweenInfo.new(30, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
			Volume = 0, 
			PlaybackSpeed = 0.5
		});
		u10 = false;
		for v43, v44 in pairs(v37:GetChildren()) do
			if v44:IsA("ParticleEmitter") then
				u5(v44, TweenInfo.new(60, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Rate = 0
				});
			end;
		end;
		for v45, v46 in pairs(v38:GetChildren()) do
			if v46:IsA("ParticleEmitter") then
				u5(v46, TweenInfo.new(30, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Rate = 0
				});
			end;
		end;
		wait(60);
		v37.Size = Vector3.new(0, 0, 0);
		v38.Size = Vector3.new(0, 0, 0);
		wait(30);
		v37:Destroy();
		v38:Destroy();
	end);
	u5(v22, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		TintColor = Color3.fromRGB(128, 200, 255), 
		Brightness = 0.25, 
		Saturation = 0.1, 
		Contrast = 0.25
	});
	u5(v23, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Intensity = -0.85
	});
	local function v47(p14)
		local v48 = NumberSequence.new({ NumberSequenceKeypoint.new(0, p14), NumberSequenceKeypoint.new(1, 1) });
		for v49, v50 in pairs(l__DiamondHammer__12.Effects.Beams:GetChildren()) do
			if v50:IsA("Beam") and string.find(v50.Name, "FlameEffect") ~= nil then
				v50.Enabled = true;
				v50.Transparency = v48;
			end;
		end;
	end;
	local v51 = v11.Values.Hammer_FlameEffectTransparency.Changed:Connect(v47);
	v47(1);
	v21:GetMarkerReachedSignal("Eye lense flare"):Connect(function(p15)
		print("Animation event: Eye lense flare");
		l__Sounds__20.LenseFlareEyes:Play();
		v11.Head.LeftEyeAttachment.Flare.Enabled = true;
		v11.Head.LeftEyeAttachment.FlareFlash:Emit(1);
		v11.Head.RightEyeAttachment.Flare.Enabled = true;
		v11.Head.RightEyeAttachment.FlareFlash:Emit(1);
	end);
	print("Animation event: HammerAppear ");
	l__DiamondHammer__12.Handle.AppearSound.Playing = true;
	l__DiamondHammer__12.Handle.AppearSound.Volume = 0;
	l__DiamondHammer__12.Handle.AppearSound.PlaybackSpeed = 0.75;
	u5(l__DiamondHammer__12.Handle.AppearSound, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Volume = 2
	});
	u5(l__DiamondHammer__12.Handle.AppearSound, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0), {
		PlaybackSpeed = 1.5
	});
	l__DiamondHammer__12.Handle.HammerBaseOutline.Sparkles.Enabled = true;
	l__DiamondHammer__12.Handle.HammerBaseOutline.Appearance.Enabled = true;
	l__DiamondHammer__12.Handle.HammerHandleBase.Appearance.Enabled = true;
	u5(l__DiamondHammer__12.Handle.HammerBaseOutline.Sparkles, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0), {
		Rate = 25
	});
	u5(l__DiamondHammer__12.Handle.HammerBaseOutline.Appearance, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Rate = 200
	});
	u5(l__DiamondHammer__12.Handle.HammerHandleBase.Appearance, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Rate = 100
	});
	u5(l__DiamondHammer__12.Handle, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0), {
		Transparency = 0
	});
	u5(l__DiamondHammer__12.Handle.Diamonds, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0), {
		Transparency = 0.1
	});
	wait(11.5);
	print("Animation event: ChargeSwing");
	l__DiamondHammer__12.Handle.ChargeSound1:Play();
	l__DiamondHammer__12.Handle.ChargeSound2:Play();
	l__DiamondHammer__12.Handle.ChargeSound3:Play();
	l__DiamondHammer__12.Handle.MainChargeSound:Play();
	for v54, v55 in pairs(l__DiamondHammer__12.Handle:GetChildren()) do
		if v55:IsA("Attachment") and string.find(v55.Name, "DiamondCenter") ~= nil then
			v55.Flare.Enabled = true;
		end;
	end;
	l__DiamondHammer__12.Handle.MainDiamondCenter.Shockwave:Emit(1);
	l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeGlow.Enabled = true;
	l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeRays.Enabled = true;
	u5(l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeRays, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		TimeScale = 1
	});
	u5(l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeGlow, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		TimeScale = 1
	});
	wait(5);
	print("Animation event: SwingStart");
	l__DiamondHammer__12.Handle.ChargeEndSound:Play();
	l__DiamondHammer__12.Handle.MainDiamondCenter.Shockwave:Emit(3);
	l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeGlow.Enabled = false;
	l__DiamondHammer__12.Handle.MainDiamondCenter.ChargeRays.Enabled = false;
	u5(l__DiamondHammer__12.Handle.MainChargeSound, TweenInfo.new(4, Enum.EasingStyle.Quart, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0.25
	});
	l__DiamondHammer__12.Handle.BaseCenter.Wind.Volume = 0;
	l__DiamondHammer__12.Handle.BaseCenter.Wind.PlaybackSpeed = 0.5;
	l__DiamondHammer__12.Handle.BaseCenter.Wind.Playing = true;
	u5(l__DiamondHammer__12.Handle.BaseCenter.Wind, TweenInfo.new(3.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 5, 
		PlaybackSpeed = 2.5
	});
	u5(v11.Values.Hammer_FlameEffectTransparency, TweenInfo.new(4, Enum.EasingStyle.Quart, Enum.EasingDirection.In, 0, false, 0), {
		Value = 0
	});
	l__DiamondHammer__12.Handle.HammerBase.Flames.Enabled = true;
	l__DiamondHammer__12.Handle.BaseFrontOffset.Shockwave.Enabled = true;
	u5(l__DiamondHammer__12.Handle.HammerBase.Flames, TweenInfo.new(2.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 100
	});
	u5(l__DiamondHammer__12.Handle.BaseFrontOffset.Shockwave, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 15
	});
	for v56, v57 in pairs(l__DiamondHammer__12.Effects.Trails:GetChildren()) do
		v57.Enabled = true;
	end;
	wait(6);
	print("Animation event: SwingEnd");
	u11 = 0.25;
	l__DiamondHammer__12.Handle.MainChargeSound:Stop();
	l__Sounds__20.Rumble:Play();
	v23.Intensity = 0.75;
	v23.Threshold = 0.05;
	v22.Contrast = 0;
	u5(v23, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Intensity = -0.9, 
		Threshold = 0.1
	});
	u5(v22, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Contrast = 0.25
	});
	u5(v11.Values.Hammer_FlameEffectTransparency, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Value = 1
	});
	l__DiamondHammer__12.Handle.BaseFrontOffset.Shockwave.Enabled = false;
	u5(l__DiamondHammer__12.Handle.HammerBase.Flames, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Rate = 0
	});
	for v58, v59 in pairs(l__DiamondHammer__12.Effects.Trails:GetChildren()) do
		v59.Enabled = false;
	end;
	l__DiamondHammer__12.Handle.BaseCenter.Wind.Playing = false;
	for v60, v61 in pairs(l__DiamondHammer__12.Handle.BaseCenter:GetChildren()) do
		if v61:IsA("Sound") and string.find(v61.Name, "Impact_") ~= nil then
			v61:Play();
		end;
	end;
	for v62, v63 in pairs(l__DiamondHammer__12.Handle:GetChildren()) do
		if v63:IsA("Attachment") and string.find(v63.Name, "DiamondCenter") ~= nil then
			v63.Flare.Enabled = false;
		end;
	end;
	local v64 = v18:Clone();
	v64.Position = u3;
	v64.Parent = workspace;
	u2(v64.EmitPoint.Impact_FractalBurst, 10);
	u2(v64.EmitPoint.Impact_RaysBurst, 25);
	u2(v64.EmitPoint.Impact_Shockwave, 30);
	u2(v64.EmitPoint.Impact_Spark1, 10);
	u2(v64.EmitPoint.Impact_Spark2, 10);
	u2(v64.EmitPoint.Impact_Spark3, 10);
	u2(v64.EmitPoint.Impact_SparkleExplosion, 10);
	u2(v64.EmitPoint.SparkleExplosion, 7.5);
	u2(v64.EmitPoint.Sparks, 5);
	for v65, v66 in pairs(v64.EmitPoint:GetChildren()) do
		if v66:IsA("ParticleEmitter") and string.find(v66.Name, "Impact_") ~= nil then
			v66:Emit(v66:GetAttribute("EmitCount"));
		end;
	end;
	v64.ApplauseLoop.Playing = true;
	v64.ChimeLoop.Playing = true;
	v64.CoinsLoop.Playing = true;
	local l__Frame__67 = v64.BillboardGuiAnimation.Frame;
	l__Frame__67.TopText.Visible = true;
	l__Frame__67.BottomText.Visible = true;
	l__Frame__67.TopText.Text = string.upper(p9) .. "";
	l__Frame__67.MiddleText.Text = u7(p11);
	l__Frame__67.BottomText.Text = "" .. string.upper(p10);
	l__Frame__67.RobuxLogo.Size = UDim2.fromScale(0, 0);
	l__Frame__67.RobuxLogo.Rotation = -180;
	l__Frame__67.Star.Size = UDim2.fromScale(0, 0);
	l__Frame__67.BottomText.Size = UDim2.fromScale(0, 0);
	l__Frame__67.BottomText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__67.MiddleText.Size = UDim2.fromScale(0, 0);
	l__Frame__67.TopText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__67.TopText.Size = UDim2.fromScale(0, 0);
	l__Frame__67.Parent.Enabled = true;
	u5(v64, TweenInfo.new(20, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Position = u3 + Vector3.new(0, 400, 0)
	});
	u5(l__Frame__67.RobuxLogo, TweenInfo.new(10, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1, 1)
	});
	u5(l__Frame__67.RobuxLogo, TweenInfo.new(15, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 0
	});
	u5(l__Frame__67.Star, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1.5, 1.5)
	});
	u5(l__Frame__67.Star, TweenInfo.new(15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 360
	});
	u5(l__Frame__67.BottomText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.6), {
		Size = UDim2.fromScale(1.5, 0.1), 
		Position = UDim2.fromScale(0.5, 0.59)
	});
	u5(l__Frame__67.MiddleText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.4), {
		Size = UDim2.fromScale(1, 1)
	});
	u5(l__Frame__67.TopText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.2), {
		Size = UDim2.fromScale(1.5, 0.1), 
		Position = UDim2.fromScale(0.5, 0.41)
	});
	u5(l__Frame__67.Star, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 5), {
		ImageTransparency = 1, 
		ImageColor3 = Color3.fromRGB(0, 255, 255)
	});
	v64.EmitPoint.Sparks.Enabled = true;
	v64.EmitPoint.SparkleExplosion.Enabled = true;
	u5(v64.EmitPoint.Sparks, TweenInfo.new(45, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u5(v64.EmitPoint.SparkleExplosion, TweenInfo.new(45, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u5(v64.ChimeLoop, TweenInfo.new(55, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 0.75
	});
	u5(v64.ApplauseLoop, TweenInfo.new(60, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0
	});
	u5(v64.CoinsLoop, TweenInfo.new(50, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 1
	});
	u5(l__Frame__67.UIScale, TweenInfo.new(15, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Scale = 0
	});
	wait(15);
	print("Animation event: Release");
	v11.Head.LeftEyeAttachment.Flare.Enabled = false;
	v11.Head.RightEyeAttachment.Flare.Enabled = false;
	local l__Appearance__68 = v11.Particles.Appearance;
	print("Animation event: Fade ");
	local v69 = l__Sounds__20.GiantFade:Clone();
	v69.Volume = 0;
	v69.PlaybackSpeed = 1.5;
	v69.Parent = v11.UpperTorso;
	v69.Playing = true;
	u5(v69, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Volume = 3
	});
	u5(v69, TweenInfo.new(8, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, 0), {
		PlaybackSpeed = 0.5
	});
	for v70, v71 in pairs(v11:GetDescendants()) do
		if (v71:IsA("BasePart") or v71:IsA("Decal")) and v71.Name ~= "HumanoidRootPart" then
			if v71:IsA("Decal") == false then
				local v72 = l__Appearance__68:Clone();
				v72.Parent = v71;
				v72.Enabled = true;
				u5(v72, TweenInfo.new(5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
					Rate = 30
				});
			end;
			u5(v71, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
				Transparency = 1
			});
		end;
	end;
	u5(l__DiamondHammer__12.Handle.HammerBaseOutline.Sparkles, TweenInfo.new(8, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u5(l__DiamondHammer__12.Handle.HammerBaseOutline.Appearance, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Rate = 200
	});
	u5(l__DiamondHammer__12.Handle.HammerHandleBase.Appearance, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0), {
		Rate = 100
	});
	u5(l__DiamondHammer__12.Handle, TweenInfo.new(8, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Transparency = 1
	});
	u5(l__DiamondHammer__12.Handle.Diamonds, TweenInfo.new(8, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Transparency = 1
	});
	print("Animation event: FadeEnd");
	v51:Disconnect();
	wait(5);
	v11:Destroy();
	local l__Frame__73 = v64.BillboardGuiAnimation.Frame;
	l__Frame__73.TopText.Visible = true;
	l__Frame__73.BottomText.Visible = true;
	l__Frame__73.TopText.Text = "UNDEFINED has dissapeared.";
	l__Frame__73.MiddleText.Text = u7(p11);
	l__Frame__73.BottomText.Text = "";
	l__Frame__73.RobuxLogo.Size = UDim2.fromScale(0, 0);
	l__Frame__73.RobuxLogo.Rotation = -180;
	l__Frame__73.Star.Size = UDim2.fromScale(0, 0);
	l__Frame__73.BottomText.Size = UDim2.fromScale(0, 0);
	l__Frame__73.BottomText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__73.MiddleText.Size = UDim2.fromScale(0, 0);
	l__Frame__73.TopText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__73.TopText.Size = UDim2.fromScale(0, 0);
	l__Frame__73.Parent.Enabled = true;
	u5(v64, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Position = u3 + Vector3.new(0, 400, 0)
	});
	u5(l__Frame__73.RobuxLogo, TweenInfo.new(10, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1, 1)
	});
	u5(l__Frame__73.RobuxLogo, TweenInfo.new(10, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 0
	});
	u5(l__Frame__73.Star, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1.5, 1.5)
	});
	u5(l__Frame__73.Star, TweenInfo.new(15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 360
	});
	u5(l__Frame__73.BottomText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.6), {
		Size = UDim2.fromScale(1.5, 0.1), 
		Position = UDim2.fromScale(0.5, 0.59)
	});
	u5(l__Frame__73.MiddleText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.4), {
		Size = UDim2.fromScale(1, 1)
	});
	u5(l__Frame__73.TopText, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0.2), {
		Size = UDim2.fromScale(1.5, 0.1), 
		Position = UDim2.fromScale(0.5, 0.41)
	});
	u5(l__Frame__73.Star, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 5), {
		ImageTransparency = 1, 
		ImageColor3 = Color3.fromRGB(0, 255, 255)
	});
	v64.EmitPoint.Sparks.Enabled = true;
	v64.EmitPoint.SparkleExplosion.Enabled = true;
	u5(v64.EmitPoint.Sparks, TweenInfo.new(10, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u5(v64.EmitPoint.SparkleExplosion, TweenInfo.new(10, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u5(v64.ChimeLoop, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 0.75
	});
	u5(v64.ApplauseLoop, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0
	});
	u5(v64.CoinsLoop, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 1
	});
	u5(l__Frame__73.UIScale, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Scale = 0
	});
	wait(1);
	v21:Play();
	spawn(function()
		l__Sounds__20.Earthquake:Play();
		l__Sounds__20.CrumbleLoop.Volume = 0;
		l__Sounds__20.CrumbleLoop.Playing = true;
		u5(l__Sounds__20.CrumbleLoop, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
			Volume = 0.5
		});
		l__Sounds__20.FireLoop.Volume = 0;
		l__Sounds__20.FireLoop.PlaybackSpeed = 0.5;
		l__Sounds__20.FireLoop.Playing = true;
		u5(l__Sounds__20.FireLoop, TweenInfo.new(5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
			Volume = 0, 
			PlaybackSpeed = 1
		});
		for v74, v75 in pairs(v11:GetDescendants()) do
			if (v75:IsA("BasePart") or v75:IsA("Decal")) and v75.Name ~= "HumanoidRootPart" and v75:IsDescendantOf(l__DiamondHammer__12) == false then
				u5(v75, TweenInfo.new(5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Transparency = 0
				});
			end;
		end;
		u5(l__Sounds__20.CrumbleLoop, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
			Volume = 0
		});
		u5(v24.Sparks, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Rate = 0
		});
		u5(v24.Appearance, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Rate = 0
		});
		u5(v24, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Size = Vector3.new(0, 1, 0)
		});
		u5(v24.OuterLightBeam, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Width0 = 0, 
			Width1 = 0
		});
		u5(v24.InnerLightBeam, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Width0 = 0, 
			Width1 = 0
		});
		u5(v24.PortalAmbiance, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0), {
			Volume = 0, 
			PlaybackSpeed = 0
		});
		v24.PortalClose1.PlayOnRemove = true;
		wait(5);
		v24:Destroy();
	end);
	wait(10);
	u8:Stop();
	u5(v22, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		TintColor = Color3.fromRGB(255, 255, 255), 
		Brightness = 0, 
		Saturation = 0, 
		Contrast = 0
	});
	u5(v23, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Intensity = -1
	});
	wait();
	v22:Destroy();
	v23:Destroy();
	l__Sounds__20:Destroy();
	v51:Disconnect();
end)("".._G.WhoDonated.." DONATED ", "TO @".._G.WhoGotRobux, "".._G.HowMuchRobux, "".._G.SmiteAnimationId);

        game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    game:GetService("Workspace").Map.Boards.LiveDonations.Top.RobuxParticles:Destroy()
    level5:Destroy()
elseif NumberWithCommas > 99999 then
print("[GLOBAL]: 💰 ".._G.WhoDonated.." tipped "..comma(_G.HowMuchRobux).." Robux to ".._G.WhoGotRobux)
    nukemessage()
    local levelNuke = game:GetObjects("rbxassetid://10147461869")[1]
levelNuke.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
levelNuke.Playing = true
    wait(5)
local l__Debris__1 = game:GetService("Debris");
local l__TweenService__1 = game:GetService("TweenService");
local l__PhysicsService__2 = game:GetService("PhysicsService");
local u3 = Vector3.new(42.448, 18.072, 101.679);
local function u4(p1, p2)
	p1.Speed = NumberRange.new(p1.Speed.Min * p2, p1.Speed.Max * p2);
	p1.Acceleration = p1.Acceleration * p2;
	local l__Keypoints__2 = p1.Size.Keypoints;
	local v3 = {};
	for v4 = 1, #l__Keypoints__2 do
		table.insert(v3, NumberSequenceKeypoint.new(l__Keypoints__2[v4].Time, l__Keypoints__2[v4].Value * p2, l__Keypoints__2[v4].Envelope * p2));
	end;
	p1.Size = NumberSequence.new(v3);
end;
local l__RunService__5 = game:GetService("RunService");
local function u6(p3, p4, p5)
	l__TweenService__1:Create(p3, p4, p5):Play();
end;
local function u7(p6)
	p6 = tostring(p6);
	return p6;
end;
(function(p7, p8, p9, p10)
	local v5 = p7:Clone();
	l__PhysicsService__2:SetPartCollisionGroup(v5, "Nuke");
	local l__NukeCFrame__6 = v5.NukeValues.NukeCFrame;
	local l__Frame__7 = v5.BillboardGuiAnimation.Frame;
	l__Frame__7.TextLabels.TopText.Visible = true;
	l__Frame__7.TextLabels.BottomText.Visible = true;
	local l__CenterEmitPoint__8 = v5.CenterEmitPoint;
	local l__ThrustEmitPoint__9 = v5.ThrustEmitPoint;
	local v10 = Instance.new("BloomEffect");
	v10.Enabled = true;
	v10.Name = "NukeBloom";
	v10.Size = 15;
	v10.Threshold = 0.25;
	v10.Intensity = -1;
	v10.Parent = game.Lighting;
	local l__Objects__11 = v5.Objects;
	local v12 = l__Objects__11.ConfettiBox:Clone();
	l__Objects__11.ConfettiBox:Destroy();
	l__Objects__11:Destroy();
	v5.Position = u3;
	u4(l__ThrustEmitPoint__9.Flame, 5);
	u4(l__ThrustEmitPoint__9.Shockwave, 15);
	u4(l__ThrustEmitPoint__9.BigShockwave, 50);
	u4(l__ThrustEmitPoint__9.Flame2, 5);
	u4(l__ThrustEmitPoint__9.Flame3, 5);
	u4(l__ThrustEmitPoint__9.Flame4, 5);
	u4(l__ThrustEmitPoint__9.Flame5, 10);
	u4(l__ThrustEmitPoint__9.Smoke, 1.5);
	u4(l__ThrustEmitPoint__9.SmokePreLaunch, 3);
	u4(l__ThrustEmitPoint__9.SmokeLaunch, 4);
	u4(l__ThrustEmitPoint__9.SmokeRing, 4);
	u4(v5.Sparkles, 2.5);
	u4(v5.Sparks, 3);
	u4(l__CenterEmitPoint__8.Rays1, 25);
	u4(l__CenterEmitPoint__8.Rays2, 25);
	u4(l__CenterEmitPoint__8.Rays3, 25);
	u4(l__CenterEmitPoint__8.SmoothRaysBig, 7.5);
	u4(l__CenterEmitPoint__8.RaysBig, 8);
	u4(l__CenterEmitPoint__8.SparkleExplosion, 4);
	u4(l__CenterEmitPoint__8.Spark3, 25);
	v5.CFrame = workspace.FakeRobuxNuke.CFrame;
	v5.AlignPosition.Position = v5.Position;
	v5.AlignOrientation.CFrame = v5.CFrame;
	local function v13(p11)
		v5.AlignPosition.Responsiveness = p11;
		v5.AlignOrientation.Responsiveness = p11;
	end;
	l__NukeCFrame__6.Value = v5.CFrame;
	v5.Anchored = false;
	v5.Parent = workspace;
	local v14 = l__RunService__5.Heartbeat:Connect(function(p12)
		v5.AlignPosition.Position = l__NukeCFrame__6.Value.Position;
		v5.AlignOrientation.CFrame = l__NukeCFrame__6.Value;
	end);
	wait(1);
	game.Players.LocalPlayer.PlayerGui.ScreenGui.LocalNuke.Alarm:Play();
	v5.Sparkles.Enabled = false;
	v5.ThrustEmitPoint.SmokePreLaunch.Enabled = true;
	v5.ThrustEmitPoint.SmokePreLaunch.Rate = 0;
	v5.PreThruster:Play();
	v5.PreThruster.Volume = 0;
	v5.PreThruster.PlaybackSpeed = 0.1;
	u6(v5.PreThruster, TweenInfo.new(5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Volume = 1, 
		PlaybackSpeed = 0.5
	});
	u6(v5.ThrustEmitPoint.SmokePreLaunch, TweenInfo.new(2.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Rate = 100
	});
	wait(5);
	v5.Sparkles.Enabled = true;
	v5.ThrustEmitPoint.SmokePreLaunch.Enabled = false;
	l__ThrustEmitPoint__9.SmokeLaunch:Emit(50);
	v13(25);
	v5.PreLaunch:Play();
	v5.Thruster2:Play();
	u6(v5.Thruster2, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), {
		PlaybackSpeed = 1.5, 
		Volume = 3
	});
	u6(v5.PreThruster, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Volume = 1, 
		PlaybackSpeed = 1
	});
	for v15, v16 in pairs(l__ThrustEmitPoint__9:GetChildren()) do
		if string.find(v16.Name, "Flame") == nil then
			v16.Enabled = true;
		end;
	end;
	l__ThrustEmitPoint__9.SmokeRing.Enabled = false;
	l__ThrustEmitPoint__9.SmokeLaunch.Enabled = false;
	l__ThrustEmitPoint__9.Shockwave.Enabled = false;
	l__ThrustEmitPoint__9.BigShockwave.Enabled = false;
	l__ThrustEmitPoint__9.Flare.Enabled = false;
	l__CenterEmitPoint__8.Rays1.Enabled = true;
	l__CenterEmitPoint__8.Rays2.Enabled = true;
	l__CenterEmitPoint__8.Rays3.Enabled = true;
	for v17 = 1, 10 do
		l__NukeCFrame__6.Value = l__NukeCFrame__6.Value:ToWorldSpace(CFrame.Angles(0, math.rad(0), math.rad(10)));
		l__NukeCFrame__6.Value = l__NukeCFrame__6.Value:ToWorldSpace(CFrame.new(0, 25, 0));
		wait(v17 * 0.0125);
	end;
	v13(10);
	l__NukeCFrame__6.Value = CFrame.new(l__NukeCFrame__6.Value.Position, u3):ToWorldSpace(CFrame.Angles(math.rad(-90), 0, 0));
	wait(0.5);
	v10.Intensity = 1;
	v10.Size = 20;
	u6(v10, TweenInfo.new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.Out, 0, false, 0), {
		Intensity = -1, 
		Size = 10
	});
	v13(50);
	l__ThrustEmitPoint__9.SmokeRing:Emit(50);
	l__ThrustEmitPoint__9.Flame:Emit(25);
	l__ThrustEmitPoint__9.Flame2:Emit(25);
	l__ThrustEmitPoint__9.Flame3:Emit(25);
	l__ThrustEmitPoint__9.Flame4:Emit(25);
	l__ThrustEmitPoint__9.Flame5:Emit(25);
	l__ThrustEmitPoint__9.Shockwave.Enabled = true;
	l__ThrustEmitPoint__9.BigShockwave:Emit(1);
	v5.Launch:Play();
	v5.Thruster:Play();
	for v18, v19 in pairs(l__ThrustEmitPoint__9:GetChildren()) do
		v19.Enabled = true;
	end;
	l__ThrustEmitPoint__9.SmokeRing.Enabled = false;
	l__ThrustEmitPoint__9.SmokeLaunch.Enabled = false;
	l__ThrustEmitPoint__9.BigShockwave.Enabled = false;
	l__ThrustEmitPoint__9.Flare:Emit(10);
	u6(l__NukeCFrame__6, TweenInfo.new(2.5, Enum.EasingStyle.Back, Enum.EasingDirection.In, 0, false, 0), {
		Value = CFrame.new(u3 + Vector3.new(0, -1, 0), u3):ToWorldSpace(CFrame.Angles(math.rad(90), 0, 0))
	});
	wait(2.6);
	game.Players.LocalPlayer.PlayerGui.ScreenGui.LocalNuke.Alarm:Stop();
	v10.Intensity = 1;
	v10.Size = 30;
	u6(v10, TweenInfo.new(5, Enum.EasingStyle.Circular, Enum.EasingDirection.Out, 0, false, 0), {
		Intensity = -1, 
		Size = 10
	});
	v5.Anchored = true;
	v5.Transparency = 1;
	v5.Size = Vector3.new(0, 0, 0);
	v5.AssemblyLinearVelocity = Vector3.new(0, 0, 0);
	v5.AssemblyAngularVelocity = Vector3.new(0, 0, 0);
	v5.CFrame = l__NukeCFrame__6.Value;
	v5.PreThruster:Stop();
	v5.Thruster:Stop();
	v5.Thruster2:Stop();
	v5.Explosion.TimePosition = 0.75;
	v5.Explosion:Play();
	v5.ChimeLoop:Play();
	v5.ApplauseLoop:Play();
	v5.CoinsLoop:Play();
	local l__CurrentCamera__8 = workspace.CurrentCamera;
	l__Frame__7.TextLabels.TopText.Text = string.upper(p8) .. " ";
	l__Frame__7.TextLabels.MiddleText.Text = u7(p10);
	l__Frame__7.TextLabels.BottomText.Text = "" .. string.upper(p9);
	l__Frame__7.RobuxLogo.Size = UDim2.fromScale(0, 0);
	l__Frame__7.RobuxLogo.Rotation = -180;
	l__Frame__7.Star.Size = UDim2.fromScale(0, 0);
	l__Frame__7.TextLabels.BottomText.Size = UDim2.fromScale(0, 0);
	l__Frame__7.TextLabels.BottomText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__7.TextLabels.MiddleText.Size = UDim2.fromScale(0, 0);
	l__Frame__7.TextLabels.TopText.Position = UDim2.fromScale(0.5, 0.5);
	l__Frame__7.TextLabels.TopText.Size = UDim2.fromScale(0, 0);
	l__Frame__7.Parent.Enabled = true;
	u6(v5, TweenInfo.new(20, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Position = u3 + Vector3.new(0, 250, 0)
	});
	u6(l__Frame__7.RobuxLogo, TweenInfo.new(10, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1, 1)
	});
	u6(l__Frame__7.RobuxLogo, TweenInfo.new(15, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 0
	});
	u6(l__Frame__7.Star, TweenInfo.new(5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out, 0, false, 0), {
		Size = UDim2.fromScale(1.5, 1.5)
	});
	u6(l__Frame__7.Star, TweenInfo.new(15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Rotation = 360
	});
	u6(l__Frame__7.Star, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 5), {
		ImageTransparency = 1, 
		ImageColor3 = Color3.fromRGB(255, 255, 0)
	});
	for v22, v23 in pairs(l__ThrustEmitPoint__9:GetChildren()) do
		v23.Enabled = false;
	end;
	v5.Sparkles.Enabled = false;
	for v24, v25 in pairs(l__CenterEmitPoint__8:GetChildren()) do
		v25.Enabled = false;
	end;
	l__CenterEmitPoint__8.SparkleExplosion:Emit(100);
	l__CenterEmitPoint__8.Shockwave:Emit(15);
	l__CenterEmitPoint__8.FractalBurst:Emit(3);
	l__CenterEmitPoint__8.RaysBig:Emit(20);
	l__CenterEmitPoint__8.Spark1:Emit(100);
	l__CenterEmitPoint__8.Spark2:Emit(100);
	l__CenterEmitPoint__8.Spark3:Emit(50);
	local v26 = v12:Clone();
	v26.Position = u3 + Vector3.new(0, 250, 0);
	v26.Parent = workspace;
	u6(v26, TweenInfo.new(10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
		Size = Vector3.new(1000, 100, 1000)
	});
	spawn(function()
		local v27 = v26:GetChildren();
		for v28, v29 in pairs(v27) do
			if v29:IsA("ParticleEmitter") then
				v29.Enabled = true;
			end;
		end;
		wait(60);
		for v30, v31 in pairs(v27) do
			if v31:IsA("ParticleEmitter") then
				u6(v31, TweenInfo.new(60, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0), {
					Rate = 0
				});
			end;
		end;
		wait(60);
		v26.Size = Vector3.new(0, 0, 0);
		wait(30);
		v26:Destroy();
	end);
	local l__SpawnFireworks__32 = game.Players.LocalPlayer.PlayerGui.ScreenGui.LocalNuke.Scripts.SpawnFireworks;
	l__SpawnFireworks__32.SpawnPosition.Value = u3;
	l__SpawnFireworks__32.Disabled = false;
	v5.Sparks.Enabled = true;
	l__CenterEmitPoint__8.SparkleExplosion.Enabled = true;
	u6(v5.Sparks, TweenInfo.new(45, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u6(l__CenterEmitPoint__8.SparkleExplosion, TweenInfo.new(45, Enum.EasingStyle.Quint, Enum.EasingDirection.In, 0, false, 0), {
		Rate = 0
	});
	u6(v5.ChimeLoop, TweenInfo.new(55, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 0.75
	});
	u6(v5.ApplauseLoop, TweenInfo.new(60, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0
	});
	u6(v5.CoinsLoop, TweenInfo.new(50, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Volume = 0, 
		PlaybackSpeed = 1
	});
	wait(30);
	u6(l__Frame__7.UIScale, TweenInfo.new(15, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {
		Scale = 0
	});
	wait(15);
	l__Frame__7.Parent.Enabled = false;
	wait(30);
	v10:Destroy();
	v14:Disconnect();
	v5:Destroy();
end)(game:GetService("ReplicatedStorage").Templates.RobuxNuke, "".._G.WhoDonated.." DONATED"," TO @".._G.WhoGotRobux,""..comma(_G.HowMuchRobux));



elseif NumberWithCommas > 9999 then
local jajaja = game:GetObjects("rbxassetid://10147762197")[1]
jajaja.Parent = game:GetService("Workspace").Map.Boards.LiveDonations.Top
jajaja.Playing = true
print("[GLOBAL]: 💰 ".._G.WhoDonated.." dropped "..comma(_G.HowMuchRobux).." Robux to ".._G.WhoGotRobux)
globalmessage()
wait(4)
jajaja:Destroy()
end

    	end
  end)




local Settings= tab5:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

local Objects = tab4:Section('Credits')

Objects:Button('Rohub Discord: discord.gg/kszkGfN24d', function() -- string <text>, function [callback]
   
end)

Objects:Button('Script Credits: Dev_Hexry#1219', function() -- string <text>, function [callback]
   
end)

Objects:Button('Ui Credits: xandu#1208 ', function() -- string <text>, function [callback]
   
end)

Objects:Button('emotional support: Lasuzx#9106', function() -- string <text>, function [callback]
   
end)


return library
end
if game.PlaceId == 3606833500 then
local function Notify(Arg_Title, Arg_Text, Arg_Duration)
	game.StarterGui:SetCore("Thanks for using Rohub!", {
		Title = Arg_Title,
		Text = Arg_Text,
		Icon = nil,
		Duration = Arg_Duration
	})
end;
local theme = {
	main = Color3.fromRGB(37, 37, 37),
	secondary = Color3.fromRGB(42, 42, 42),
	accent = Color3.fromRGB(255, 255, 255),
	accent2 = Color3.fromRGB(170, 170, 170)
}

if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end


local services = setmetatable({}, {
	__index = function(index, service)
		return game:GetService(service)
	end,
	__newindex = function(index, value)
		index[value] = nil
		return
	end
})

local players = services.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {
	flags = {};
	binds = {};
	objstorage = {};
	funcstorage = {};
	binding = false;
	tabinfo = {button = nil, tab = nil};
	destroyed = false;
	ui = nil,
    toggleui = function() end
}

function library.destroy()
	library.ui:Destroy()
	library.destroyed = true
end

local function isreallypressed(bind, inp)
	local key = bind
	if typeof(key) == "Instance" then
		if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
			return true;
		elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
			return true
		end
	end
	if tostring(key):find'MouseButton1' then
		return key == inp.UserInputType
	else
		return key == inp.KeyCode
	end
end

pcall(function()
	services.UserInputService.InputBegan:Connect(function(input, gp)
		if library.destroyed then return end
		if gp then else
			if (not library.binding) then
				for idx, binds in next, library.binds do
					local real_binding = binds.location[idx];
					if real_binding and isreallypressed(real_binding, input) then
						binds.callback()
					end
				end
			end
		end
	end)
end)

local utils = {};

function utils:Tween(obj, t, data)
	services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
	return true
end

function utils:HoverEffect(obj)
    Btn.MouseEnter:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0.3
        })
    end)

    Btn.MouseLeave:Connect(function()
        self:Tween(Btn, {0.15, 'Sine', 'InOut'}, {
            BackgroundTransparency = 0
        })
    end)
end

function utils:Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = theme.accent
		Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
		wait(0.15)
		self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
		wait(.3)
		Ripple:Destroy()
	end)
end

function utils:Drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

local changingTab = false
function utils:ChangeTab(newData)
	if changingTab then return end
	local btn, tab = newData[1], newData[2]
	if not btn or not tab then return end
	if library.tabinfo.button == btn then return end
	changingTab = true
	local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
	local oldicon, newicon = oldbtn.TabIcon, btn.TabIcon
	library.tabinfo = {button = btn, tab = tab}
	local container = tab.Parent
	if container.ClipsDescendants == false then container.ClipsDescendants = true end
	local beforeSize = container.Size

	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = UDim2.new(beforeSize.X.Scale, beforeSize.X.Offset, 0, 0)})
	self:Tween(oldbtn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent2})
	self:Tween(oldicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent2})
	wait(0.3)
	oldtab.Visible = false
	tab.Visible = true
	self:Tween(container, {0.3, 'Sine', 'InOut'}, {Size = beforeSize})
	self:Tween(btn, {0.3, 'Sine', 'InOut'}, {TextColor3 = theme.accent})
	self:Tween(newicon, {0.3, 'Sine', 'InOut'}, {ImageColor3 = theme.accent})
	wait(0.3)
	changingTab = false
end

function library:UpdateSlider(flag, value, min, max)
	local slider = self.objstorage[flag]
	local bar = slider.SliderBar
	local box = slider.SliderValHolder.SliderVal

	local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

	if value then
		percent = (value - min) / (max - min)
	end

	percent = math.clamp(percent, 0, 1)
	value = value or math.floor(min + (max - min) * percent)

	box.Text = tostring(value)

	utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})

    self.flags[flag] = tonumber(value)

	self.funcstorage[flag](tonumber(value))
end

function library:UpdateToggle(flag, value)
	if not library.objstorage[flag] then return end
	local oldval = library.flags[flag]
	local obj = library.objstorage[flag]
	local func = library.funcstorage[flag]
	if oldval == value then return end
	if not value then value = not oldval end
	library.flags[flag] = value
	local fill = obj.ToggleDisplay.ToggleDisplayFill
	local toggleoff = UDim2.new(0, 3, 0.5, 0)
	local toggleon = UDim2.new(0, 17, 0.5, 0)
	spawn(function()
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 16)})
		wait(.15)
		utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Size = UDim2.new(0, 24, 0, 20)})
	end)
	utils:Tween(fill, {0.3,'Sine', 'InOut'}, {Position = value and toggleon or toggleoff, BackgroundColor3 = value and theme.accent or theme.main}) 
	spawn(function()
		func(value)
	end)
end

function library:Init(title)
	local Library = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local TopC = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local Side = Instance.new("Frame")
	local SideC = Instance.new("UICorner")
	local BtnHolder = Instance.new("ScrollingFrame")
	local BtnHolderL = Instance.new("UIListLayout")
	local BtnHolderP = Instance.new("UIPadding")
	local TabHolder = Instance.new("Frame")
	local TabHolderC = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(Library)
    end
	Library.Name = services.HttpService:GenerateGUID()
	Library.Parent = (gethui and gethui()) or (get_hidden_gui and get_hidden_gui()) or services.CoreGui
	Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    library.ui = Library

	Main.Name = "Main"
	Main.Parent = Library
	Main.BackgroundColor3 = theme.secondary
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
	Main.Size = UDim2.new(0, 609, 0, 505)
	Main.ClipsDescendants = true
	local toggled = true
	function library.toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then wait(0.3) end
		end)
		utils:Tween(Main, {0.3, 'Sine', 'InOut'}, {
			Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
		})
	end

	MainC.CornerRadius = UDim.new(0, 4)
	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = theme.main
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 6, 0, 6)
	Top.Size = UDim2.new(0, 597, 0, 46)

    utils:Drag(Main, Top)

	TopC.CornerRadius = UDim.new(0, 4)
	TopC.Name = "TopC"
	TopC.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = theme.accent
	Title.BackgroundTransparency = 1.000
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.0234505869, 0, 0, 0)
	Title.Size = UDim2.new(0, 186, 0, 46)
	Title.Font = Enum.Font.GothamSemibold
	Title.Text = title
	Title.TextColor3 = theme.accent
	Title.TextSize = 16.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = theme.main
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 6, 0, 58)
	Side.Size = UDim2.new(0, 180, 0, 441)

	SideC.CornerRadius = UDim.new(0, 4)
	SideC.Name = "SideC"
	SideC.Parent = Side

	BtnHolder.Name = "BtnHolder"
	BtnHolder.Parent = Side
	BtnHolder.Active = true
	BtnHolder.BackgroundColor3 = theme.accent
	BtnHolder.BackgroundTransparency = 1.000
	BtnHolder.BorderSizePixel = 0
	BtnHolder.Size = UDim2.new(0, 180, 0, 441)
	BtnHolder.ScrollBarThickness = 2

	BtnHolderL.Name = "BtnHolderL"
	BtnHolderL.Parent = BtnHolder
	BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
	BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
	BtnHolderL.Padding = UDim.new(0, 4)

	BtnHolderP.Name = "BtnHolderP"
	BtnHolderP.Parent = BtnHolder
	BtnHolderP.PaddingTop = UDim.new(0, 4)
	
	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Main
	TabHolder.BackgroundColor3 = theme.main
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 192, 0, 58)
	TabHolder.Size = UDim2.new(0, 411, 0, 441)

	TabHolderC.CornerRadius = UDim.new(0, 4)
	TabHolderC.Name = "TabHolderC"
	TabHolderC.Parent = TabHolder

    BtnHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        BtnHolder.CanvasSize = UDim2.new(0, 0, 0, BtnHolderL.AbsoluteContentSize.Y + 6) -- 1
    end)
	
	local tabs = {}
	function tabs:Tab(tabName, icon)
		local TabOpen = Instance.new("TextButton")
		local TabOpenC = Instance.new("UICorner")
		local TabIcon = Instance.new("ImageLabel")
		local Tab = Instance.new("ScrollingFrame")
		local TabL = Instance.new("UIListLayout")
		local TabP = Instance.new("UIPadding")
		
		TabOpen.Name = "TabOpen"
		TabOpen.Parent = BtnHolder
		TabOpen.BackgroundColor3 = theme.secondary
		TabOpen.BackgroundTransparency = 1.000
		TabOpen.BorderSizePixel = 0
		TabOpen.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
		TabOpen.Size = UDim2.new(0, 164, 0, 30)
		TabOpen.AutoButtonColor = false
		TabOpen.Font = Enum.Font.GothamSemibold
		TabOpen.Text = ("       %s"):format(tabName)
		TabOpen.TextColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
		TabOpen.TextSize = 14.000
		TabOpen.TextXAlignment = Enum.TextXAlignment.Left

		TabOpenC.CornerRadius = UDim.new(0, 4)
		TabOpenC.Name = "TabOpenC"
		TabOpenC.Parent = TabOpen

		TabIcon.Name = "TabIcon"
		TabIcon.Parent = TabOpen
		TabIcon.BackgroundTransparency = 1.000
		TabIcon.Position = UDim2.new(0, 0, 0.166666672, 0)
		TabIcon.Size = UDim2.new(0, 20, 0, 20)
		TabIcon.Image = ("rbxassetid:4941755400"):format((icon or 4941755400))
		TabIcon.ScaleType = Enum.ScaleType.Fit
		TabIcon.ImageColor3 = (library.tabinfo.button == nil and theme.accent) or theme.accent2
			
		Tab.Name = "Tab"
		Tab.Parent = TabHolder
		Tab.Active = true
		Tab.BackgroundColor3 = theme.accent
		Tab.BackgroundTransparency = 1.000
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 411, 0, 441)
		Tab.ScrollBarThickness = 2
		Tab.Visible = (library.tabinfo.button == nil)

		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 8)

		TabP.Name = "TabP"
		TabP.Parent = Tab
		TabP.PaddingTop = UDim.new(0, 8)
		
		if library.tabinfo.button == nil then
			library.tabinfo.button = TabOpen
			library.tabinfo.tab = Tab
		end

        TabOpen.MouseButton1Click:Connect(function()
            spawn(function()
                utils:Ripple(TabOpen)
            end)
            utils:ChangeTab({TabOpen, Tab})
        end)

        TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 16)
        end)

        local sections = {}

        function sections:Section(name)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionP = Instance.new("UIPadding")
            local SectionL = Instance.new("UIListLayout")
            local SectionTitle = Instance.new("TextLabel")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.secondary
            Section.BorderSizePixel = 0
            Section.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            Section.Size = UDim2.new(0, 392, 0, 568)
            
            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 8)
            
            SectionL.Name = "SectionL"
            SectionL.Parent = Section
            SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionL.Padding = UDim.new(0, 8)
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundColor3 = theme.accent
            SectionTitle.BackgroundTransparency = 1.000
            SectionTitle.BorderSizePixel = 0
            SectionTitle.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            SectionTitle.Size = UDim2.new(0, 390, 0, 18)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = ("   %s"):format(name)
            SectionTitle.TextColor3 = theme.accent
            SectionTitle.TextSize = 14.000
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

            SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 392, 0, SectionL.AbsoluteContentSize.Y + 13)
            end)

            local modules = {}

            function modules:Button(text, callback)
                assert(text, 'text is a required arg')
                local callback = callback or function() end

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = theme.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(text)
                Btn.TextColor3 = theme.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 4)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        utils:Ripple(Btn)
                    end)
                    spawn(callback)
                end)
            end

            function modules:Label(text)
                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = theme.main
                Label.BackgroundTransparency = 0
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                Label.Size = UDim2.new(0, 382, 0, 26)
                Label.Font = Enum.Font.GothamSemibold
                Label.TextColor3 = theme.accent
                Label.TextSize = 14.000
                Label.Text = text

                LabelC.Name = "LabelC"
                LabelC.Parent = Label
                LabelC.CornerRadius = UDim.new(0, 4)
                return Label
            end

            function modules:Toggle(text, flag, enabled, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local enabled = enabled or false
                local callback = callback or function() end

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local ToggleDisplay = Instance.new("Frame")
                local ToggleDisplayC = Instance.new("UICorner")
                local ToggleDisplayFill = Instance.new("Frame")
                local ToggleDisplayFillC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = theme.main
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Toggle.Size = UDim2.new(0, 382, 0, 42)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = ("   %s"):format(text)
                Toggle.TextColor3 = theme.accent
                Toggle.TextSize = 14.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleC.CornerRadius = UDim.new(0, 4)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle
                
                ToggleDisplay.Name = "ToggleDisplay"
                ToggleDisplay.Parent = Toggle
                ToggleDisplay.BackgroundColor3 = theme.secondary
                ToggleDisplay.BorderSizePixel = 0
                ToggleDisplay.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                ToggleDisplay.Size = UDim2.new(0, 45, 0, 26)
                
                ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayC.Name = "ToggleDisplayC"
                ToggleDisplayC.Parent = ToggleDisplay
                
                ToggleDisplayFill.Name = "ToggleDisplayFill"
                ToggleDisplayFill.Parent = ToggleDisplay
                ToggleDisplayFill.AnchorPoint = Vector2.new(0, 0.5)
                ToggleDisplayFill.BackgroundColor3 = theme.main
                ToggleDisplayFill.BorderSizePixel = 0
                ToggleDisplayFill.Position = UDim2.new(0, 3, 0.5, 0)
                ToggleDisplayFill.Size = UDim2.new(0, 24, 0, 20)
                
                ToggleDisplayFillC.CornerRadius = UDim.new(0, 4)
                ToggleDisplayFillC.Name = "ToggleDisplayFillC"
                ToggleDisplayFillC.Parent = ToggleDisplayFill

                library.flags[flag] = false
                library.funcstorage[flag] = callback
                library.objstorage[flag] = Toggle

                if enabled ~= false then
                    library:UpdateToggle(flag, true)
                end

                ToggleDisplay.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateToggle(flag)
                    end
                end)
            end

            function modules:Textbox(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')

                local default = default or ''
                local callback = callback or function() end

                library.flags[flag] = default

                local Textbox = Instance.new("TextButton")
                local TextboxC = Instance.new("UICorner")
                local TextboxValHolder = Instance.new("Frame")
                local TextboxValHolderL = Instance.new("UIListLayout")
                local TextInp = Instance.new("TextBox")
                local TextInpC = Instance.new("UICorner")
                
                Textbox.Name = "Textbox"
                Textbox.Parent = Section
                Textbox.BackgroundColor3 = theme.main
                Textbox.BorderSizePixel = 0
                Textbox.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                Textbox.Size = UDim2.new(0, 382, 0, 42)
                Textbox.AutoButtonColor = false
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = ("   %s"):format(text)
                Textbox.TextColor3 = theme.accent
                Textbox.TextSize = 14.000
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxC.CornerRadius = UDim.new(0, 4)
                TextboxC.Name = "TextboxC"
                TextboxC.Parent = Textbox
                
                TextboxValHolder.Name = "TextboxValHolder"
                TextboxValHolder.Parent = Textbox
                TextboxValHolder.BackgroundColor3 = theme.accent
                TextboxValHolder.BackgroundTransparency = 1.000
                TextboxValHolder.BorderSizePixel = 0
                TextboxValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                TextboxValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                TextboxValHolderL.Name = "TextboxValHolderL"
                TextboxValHolderL.Parent = TextboxValHolder
                TextboxValHolderL.FillDirection = Enum.FillDirection.Horizontal
                TextboxValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextInp.Name = "TextInp"
                TextInp.Parent = TextboxValHolder
                TextInp.BackgroundColor3 = theme.secondary
                TextInp.BorderSizePixel = 0
                TextInp.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                TextInp.Size = UDim2.new(0, 100, 0, 26)
                TextInp.Font = Enum.Font.Gotham
                TextInp.Text = default
                TextInp.TextColor3 = theme.accent
                TextInp.TextSize = 14.000
                
                TextInp.Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)

                TextInpC.CornerRadius = UDim.new(0, 4)
                TextInpC.Name = "TextInpC"
                TextInpC.Parent = TextInp

                TextInp.FocusLost:Connect(function()
                    if TextInp.Text == "" then
                        TextInp.Text = library.flags[flag]
                    end
                    library.flags[flag] = TextInp.Text
                    callback(TextInp.Text)
                end)
    
                TextInp:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(TextInp, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, TextInp.TextBounds.X + 14, 0, 26)
                    })
                end)
            end

            function modules:Slider(text, flag, default, min, max, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                assert(min, 'min is a required arg')
                assert(max, 'min is a required arg')
                
                local value = default or min
			    library.flags[flag] = value
                
                local callback = callback or function() end 

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillC = Instance.new("UICorner")
                local SliderValHolder = Instance.new("Frame")
                local SliderValHolderL = Instance.new("UIListLayout")
                local SliderVal = Instance.new("TextBox")
                local SliderValC = Instance.new("UICorner")
                
                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = theme.main
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                Slider.Size = UDim2.new(0, 382, 0, 62)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = ""
                Slider.TextColor3 = theme.accent
                Slider.TextSize = 14.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                library.objstorage[flag] = Slider
			    library.funcstorage[flag] = callback
                
                SliderC.CornerRadius = UDim.new(0, 4)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = theme.accent
                SliderText.BackgroundTransparency = 1.000
                SliderText.BorderSizePixel = 0
                SliderText.Size = UDim2.new(0, 200, 0, 42)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = ("   %s"):format(text)
                SliderText.TextColor3 = theme.accent
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = theme.secondary
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 9, 0, 42)
                SliderBar.Size = UDim2.new(0, 363, 0, 10)
                
                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = theme.accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 0, 10)
                
                SliderFillC.CornerRadius = UDim.new(0, 4)
                SliderFillC.Name = "SliderFillC"
                SliderFillC.Parent = SliderFill
                
                SliderValHolder.Name = "SliderValHolder"
                SliderValHolder.Parent = Slider
                SliderValHolder.BackgroundColor3 = theme.accent
                SliderValHolder.BackgroundTransparency = 1.000
                SliderValHolder.BorderSizePixel = 0
                SliderValHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                SliderValHolder.Size = UDim2.new(0, 84, 0, 42)
                
                SliderValHolderL.Name = "SliderValHolderL"
                SliderValHolderL.Parent = SliderValHolder
                SliderValHolderL.FillDirection = Enum.FillDirection.Horizontal
                SliderValHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                SliderValHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                SliderValHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                SliderVal.Name = "SliderVal"
                SliderVal.Parent = SliderValHolder
                SliderVal.BackgroundColor3 = theme.secondary
                SliderVal.BorderSizePixel = 0
                SliderVal.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                SliderVal.Size = UDim2.new(0, 46, 0, 26)
                SliderVal.Font = Enum.Font.Gotham
                SliderVal.Text = value
                SliderVal.TextColor3 = theme.accent
                SliderVal.TextSize = 14.000
                
                SliderValC.CornerRadius = UDim.new(0, 4)
                SliderValC.Name = "SliderValC"
                SliderValC.Parent = SliderVal

                SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)

                SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, SliderVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                library:UpdateSlider(flag, value, min, max)
                local dragging = false

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library:UpdateSlider(flag, nil, min, max)
                        dragging = true
                    end
                end)

                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        library:UpdateSlider(flag, nil, min, max)
                    end
                end)

                local boxFocused = false
                local allowed = {
                    [""] = true,
                    ["-"] = true
                }

                SliderVal.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderVal.FocusLost:Connect(function()
                    boxFocused = false
                    if not tonumber(SliderVal.Text) then
                        library:UpdateSlider(flag, default or min, min, max)
                    end
                end)

                SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                    if not boxFocused then return end
                    SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    local text = SliderVal.Text

                    if not tonumber(text) then
                        SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderVal.Text = tostring(max)
                        end
                        library:UpdateSlider(flag, tonumber(text) or value, min, max)
                    end
                end)
            end

            function modules:Keybind(text, flag, default, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(default, 'default is a required arg')
                
                local callback = callback or function() end
                
                local banned = {
                    Return = true;
                    Space = true;
                    Tab = true;
                    Unknown = true;
                }

                local shortNames = {
                    RightControl = 'Right Ctrl',
                    LeftControl = 'Left Ctrl',
                    LeftShift = 'Left Shift',
                    RightShift = 'Right Shift',
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = '[',
                    RightBracket = ']',
                    Equals = '=',
                    Minus = '-',
                    RightAlt = 'Right Alt',
                    LeftAlt = 'Left Alt'
                }

                local allowed = {
                    MouseButton1 = false,
                    MouseButton2 = false
                }   

                local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                library.flags[flag] = default or "None"

                local Keybind = Instance.new("TextButton")
                local KeybindC = Instance.new("UICorner")
                local KeybindHolder = Instance.new("Frame")
                local KeybindHolderL = Instance.new("UIListLayout")
                local KeybindVal = Instance.new("TextButton")
                local KeybindValC = Instance.new("UICorner")

                Keybind.Name = "Keybind"
                Keybind.Parent = Section
                Keybind.BackgroundColor3 = theme.main
                Keybind.BorderSizePixel = 0
                Keybind.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                Keybind.Size = UDim2.new(0, 382, 0, 42)
                Keybind.AutoButtonColor = false
                Keybind.Font = Enum.Font.GothamSemibold
                Keybind.Text = ("   %s"):format(text)
                Keybind.TextColor3 = theme.accent
                Keybind.TextSize = 14.000
                Keybind.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindC.CornerRadius = UDim.new(0, 4)
                KeybindC.Name = "KeybindC"
                KeybindC.Parent = Keybind
                
                KeybindHolder.Name = "SliderValHolder"
                KeybindHolder.Parent = Keybind
                KeybindHolder.BackgroundColor3 = theme.accent
                KeybindHolder.BackgroundTransparency = 1.000
                KeybindHolder.BorderSizePixel = 0
                KeybindHolder.Position = UDim2.new(0.746835411, 0, 0, 0)
                KeybindHolder.Size = UDim2.new(0, 84, 0, 42)
                
                KeybindHolderL.Name = "SliderValHolderL"
                KeybindHolderL.Parent = KeybindHolder
                KeybindHolderL.FillDirection = Enum.FillDirection.Horizontal
                KeybindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                KeybindVal.Parent = KeybindHolder
                KeybindVal.BackgroundColor3 = theme.secondary
                KeybindVal.BorderSizePixel = 0
                KeybindVal.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                KeybindVal.Size = UDim2.new(0, 0, 0, 26)
                KeybindVal.AutoButtonColor = false
                KeybindVal.Font = Enum.Font.Gotham
                KeybindVal.Text = nm
                KeybindVal.TextColor3 = theme.accent
                KeybindVal.TextSize = 14.000
                
                KeybindValC.CornerRadius = UDim.new(0, 4)
                KeybindValC.Name = "SliderValC"
                KeybindValC.Parent = Bind

                KeybindVal.Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                
                KeybindVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                    utils:Tween(KeybindVal, {0.1, 'Linear', 'InOut'}, {
                        Size = UDim2.new(0, KeybindVal.TextBounds.X + 14, 0, 26)
                    })
                end)

                KeybindVal.MouseButton1Click:Connect(function()
                    library.binding = true
                    KeybindVal.Text = "..."
                    local a, b = services.UserInputService.InputBegan:wait()
                    local name = tostring(a.KeyCode.Name)
                    local typeName = tostring(a.UserInputType.Name)
                    if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                        local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                        library.flags[flag] = (a)
                        KeybindVal.Text = shortNames[name] or name
                    else
                        if (library.flags[flag]) then
                            if (not pcall(function()
                                    return library.flags[flag].UserInputType
                                end)) then
                                local name = tostring(library.flags[flag])
                                KeybindVal.Text = shortNames[name] or name
                            else
                                local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                KeybindVal.Text = shortNames[name] or name
                            end
                        end
                    end
                    wait(0.1)  
                    library.binding = false
                end)
                if library.flags[flag] then
                    KeybindVal.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                end
                library.binds[flag] = {
                    location = library.flags,
                    callback = function()
                        callback()	
                    end
                }
            end

            function modules:Dropdown(text, flag, options, callback)
                assert(text, 'text is a required arg')
                assert(flag, 'flag is a required arg')
                assert(options, 'options is a required arg')
                
                if type(options) ~= 'table' then
                    options = {'No Options Found'}
                end
                if #options < 1 then
                    options = {'No Options Found'}
                end
                
                local optionStorage = {}
                local callback = callback or function() end
                library.flags[flag] = options[1]

                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local Back = Instance.new("ImageLabel")
                local DropdownBottom = Instance.new("TextButton")
                local DropdownBottomC = Instance.new("UICorner")
                local DropdownObjects = Instance.new("ScrollingFrame")
                local DropdownObjectsList = Instance.new("UIListLayout")
                local DropdownObjectsPadding = Instance.new("UIPadding")

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = Section
                DropdownTop.BackgroundColor3 = theme.main
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                DropdownTop.Size = UDim2.new(0, 382, 0, 42)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ("   %s"):format(library.flags[flag])
                DropdownTop.TextColor3 = theme.accent
                DropdownTop.TextSize = 14.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 4)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                Back.Name = "Back"
                Back.Parent = DropdownTop
                Back.BackgroundTransparency = 1.000
                Back.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                Back.Rotation = -90.000
                Back.Size = UDim2.new(0, 30, 0, 30)
                Back.Image = "rbxassetid://4370337241"
                Back.ScaleType = Enum.ScaleType.Fit
                Back.ImageColor3 = theme.accent
                
                DropdownBottom.Name = "DropdownBottom"
                DropdownBottom.Parent = Section
                DropdownBottom.BackgroundColor3 = theme.main
                DropdownBottom.BorderSizePixel = 0
                DropdownBottom.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                DropdownBottom.Size = UDim2.new(0, 382, 0, 0)
                DropdownBottom.AutoButtonColor = false
                DropdownBottom.Font = Enum.Font.GothamSemibold
                DropdownBottom.Text = ""
                DropdownBottom.TextColor3 = theme.accent
                DropdownBottom.TextSize = 14.000
                DropdownBottom.TextXAlignment = Enum.TextXAlignment.Left
                DropdownBottom.Visible = false
                
                DropdownBottomC.CornerRadius = UDim.new(0, 4)
                DropdownBottomC.Name = "DropdownBottomC"
                DropdownBottomC.Parent = DropdownBottom
                
                DropdownObjects.Name = "DropdownObjects"
                DropdownObjects.Parent = DropdownBottom
                DropdownObjects.Active = true
                DropdownObjects.BackgroundColor3 = theme.accent
                DropdownObjects.BackgroundTransparency = 1.000
                DropdownObjects.BorderSizePixel = 0
                DropdownObjects.Size = UDim2.new(1, 0, 1, 0)
                DropdownObjects.ScrollBarThickness = 2
                
                DropdownObjectsList.Name = "DropdownObjectsList"
                DropdownObjectsList.Parent = DropdownObjects
                DropdownObjectsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownObjectsList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownObjectsList.Padding = UDim.new(0, 4)
                
                DropdownObjectsPadding.Name = "DropdownObjectsPadding"
                DropdownObjectsPadding.Parent = DropdownObjects
                DropdownObjectsPadding.PaddingTop = UDim.new(0, 4)                

                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    DropdownObjects.CanvasSize = UDim2.new(0, 0, 0, DropdownObjectsList.AbsoluteContentSize.Y + 7)
                end)

                local isOpen = false
                local function toggleDropdown()
                    isOpen = not isOpen
                    if not isOpen then
                        spawn(function()
                            wait(.3)
                            DropdownBottom.Visible = false
                        end)
                    else
                        DropdownBottom.Visible = true
                    end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end
                
                DropdownObjectsList:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    if not isOpen then return end
                    local openTo = 183
                    if DropdownObjectsList.AbsoluteContentSize.Y < openTo then
                        openTo = DropdownObjectsList.AbsoluteContentSize.Y
                    end
                    DropdownTop.Text = ('   %s'):format(isOpen and text or library.flags[flag])
                    utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                        Rotation = (isOpen and 90) or -90
                    })
                    utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 382, 0, isOpen and openTo + 3 or 0)
                    })
                end)
                
                Back.InputEnded:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleDropdown()
                    end
                end)
                
                local cnt = 0
                local selectedOption = nil
                for _, v in pairs(options) do
                    cnt = cnt + 1
                    local Option = Instance.new("TextButton")
                    table.insert(optionStorage, Option)
                    if cnt == 1 then selectedOption = Option end
                    
                    Option.Name = "Option"
                    Option.Parent = DropdownObjects
                    Option.BackgroundColor3 = theme.secondary
                    Option.BackgroundTransparency = 1.000
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    Option.Size = UDim2.new(0, 372, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamSemibold
                    Option.Text = v
                    Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                    Option.TextSize = 14.000
                    
                    Option.MouseButton1Click:Connect(function()
                        if Option ~= selectedOption then 
                            selectedOption.TextColor3 = theme.accent2 
                            Option.TextColor3 = theme.accent 
                            selectedOption = Option 
                        end
                        library.flags[flag] = v
                        spawn(toggleDropdown)
                        spawn(function()
                            callback(v)
                        end)
                    end)
                end
                local eee = {}
                function eee:refresh(new)
                    for _, v in pairs(optionStorage) do
                        v:Destroy()
                    end
                    optionStorage = {}
                    selectedOption = nil
                    cnt = 0
                    for _, v in pairs(new) do
                        cnt = cnt + 1
                        local Option = Instance.new("TextButton")
                        table.insert(optionStorage, Option)
                        if cnt == 1 then selectedOption = Option end
                        
                        Option.Name = "Option"
                        Option.Parent = DropdownObjects
                        Option.BackgroundColor3 = theme.secondary
                        Option.BackgroundTransparency = 1.000
                        Option.BorderSizePixel = 0
                        Option.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        Option.Size = UDim2.new(0, 372, 0, 26)
                        Option.AutoButtonColor = false
                        Option.Font = Enum.Font.GothamSemibold
                        Option.Text = v
                        Option.TextColor3 = (Option == selectedOption and theme.accent) or theme.accent2
                        Option.TextSize = 14.000
                        
                        Option.MouseButton1Click:Connect(function()
                            if Option ~= selectedOption then 
                                selectedOption.TextColor3 = theme.accent2 
                                Option.TextColor3 = theme.accent 
                                selectedOption = Option 
                            end
                            library.flags[flag] = v
                            spawn(toggleDropdown)
                            spawn(function()
                                callback(v)
                            end)
                        end)
                    end
                end
                return eee                
            end

            return modules
        end
        return sections
	end
    return tabs
end

local ui = library:Init('RoHub|Strucid Zone war')

local tab1 = ui:Tab('🎯Aim','4941755400')
local tab2 = ui:Tab('Visuals', '')
local tab3 = ui:Tab('Player', '')
local tab4 = ui:Tab('Credits', '')
local tab5 = ui:Tab('Settings', '')


local Objects = tab1:Section('Aim Settings')

Objects:Button('Silent Aim', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/ICEEDev/Epic-Roblox-Scripts/master/StrucidSilentAim.lua", true))()
end)

Objects:Button('Pro firerate', function() -- string <text>, function [callback]
    local req=getrenv().require;

getrenv().require=function(...)
local dat = req(...)

if(typeof(dat)=='table')then
dat.Recoil=0
dat.Debounce=.05
dat.Inaccuracy=0
dat.Lvl=1
end

return dat;
end
end)


Objects:Button('Aimbot (SOON)', function() -- string <text>, function [callback]
    
end)





local Objects = tab2:Section('Visuals')

Objects:Button('ESP', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/SKELEESP/main/SPOOKY", true))()
end)

Objects:Button('Tracers', function() -- string <text>, function [callback]
    loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/trace/main/lua", true))()
end)
local Objects = tab3:Section('Player')

Objects:Button('Fly', function() -- string <text>, function [callback]
   loadstring(game:HttpGet(('https://pastebin.com/raw/WxmvCLLH'),true))()
end)

Objects:Button('enable fly everytime you spawn in', function() -- string <text>, function [callback]
   
end)

Objects:Button('Inf jump', function() -- string <text>, function [callback]
   loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/INF/main/jump", true))()
end)

Objects:Button('Rejoin on vote kick', function() -- string <text>, function [callback]
   loadstring(game:HttpGet("https://raw.githubusercontent.com/DevHexry/SECRTE/main/ff", true))()
end)

local Settings= tab5:Section('Settings')

Settings:Button('Destroy UI', library.destroy) -- string <text>, function [callback]
Settings:Keybind('Toggle UI', 'toggleUi', Enum.KeyCode.RightShift, library.toggleui) -- string <text>, function [callback]

local Objects = tab4:Section('Credits')

Objects:Button('Rohub Discord: discord.gg/kszkGfN24d', function() -- string <text>, function [callback]
   
end)

Objects:Button('Script Credits: Dev_Hexry#1219', function() -- string <text>, function [callback]
   
end)

Objects:Button('Ui Credits: xandu#1208 ', function() -- string <text>, function [callback]
   
end)

Objects:Button('emotional support: Lasuzx#9106', function() -- string <text>, function [callback]
   
end)

Objects:Button('xandu#1208s Discord: https://discord.gg/Ab69sCk6Hk ', function() -- string <text>, function [callback]
   
end)




return library
end
